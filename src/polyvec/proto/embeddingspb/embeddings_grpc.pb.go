// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: embeddings.proto

package embeddingspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Embeddings_GenerateEmbeddings_FullMethodName    = "/embeddings.Embeddings/GenerateEmbeddings"
	Embeddings_FindSimilarEmbeddings_FullMethodName = "/embeddings.Embeddings/FindSimilarEmbeddings"
)

// EmbeddingsClient is the client API for Embeddings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmbeddingsClient interface {
	GenerateEmbeddings(ctx context.Context, in *EmbeddingsRequest, opts ...grpc.CallOption) (*EmbeddingsResponse, error)
	FindSimilarEmbeddings(ctx context.Context, in *FindSimilarRequest, opts ...grpc.CallOption) (*FindSimilarResponse, error)
}

type embeddingsClient struct {
	cc grpc.ClientConnInterface
}

func NewEmbeddingsClient(cc grpc.ClientConnInterface) EmbeddingsClient {
	return &embeddingsClient{cc}
}

func (c *embeddingsClient) GenerateEmbeddings(ctx context.Context, in *EmbeddingsRequest, opts ...grpc.CallOption) (*EmbeddingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmbeddingsResponse)
	err := c.cc.Invoke(ctx, Embeddings_GenerateEmbeddings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingsClient) FindSimilarEmbeddings(ctx context.Context, in *FindSimilarRequest, opts ...grpc.CallOption) (*FindSimilarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindSimilarResponse)
	err := c.cc.Invoke(ctx, Embeddings_FindSimilarEmbeddings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmbeddingsServer is the server API for Embeddings service.
// All implementations must embed UnimplementedEmbeddingsServer
// for forward compatibility.
type EmbeddingsServer interface {
	GenerateEmbeddings(context.Context, *EmbeddingsRequest) (*EmbeddingsResponse, error)
	FindSimilarEmbeddings(context.Context, *FindSimilarRequest) (*FindSimilarResponse, error)
	mustEmbedUnimplementedEmbeddingsServer()
}

// UnimplementedEmbeddingsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmbeddingsServer struct{}

func (UnimplementedEmbeddingsServer) GenerateEmbeddings(context.Context, *EmbeddingsRequest) (*EmbeddingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateEmbeddings not implemented")
}
func (UnimplementedEmbeddingsServer) FindSimilarEmbeddings(context.Context, *FindSimilarRequest) (*FindSimilarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSimilarEmbeddings not implemented")
}
func (UnimplementedEmbeddingsServer) mustEmbedUnimplementedEmbeddingsServer() {}
func (UnimplementedEmbeddingsServer) testEmbeddedByValue()                    {}

// UnsafeEmbeddingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmbeddingsServer will
// result in compilation errors.
type UnsafeEmbeddingsServer interface {
	mustEmbedUnimplementedEmbeddingsServer()
}

func RegisterEmbeddingsServer(s grpc.ServiceRegistrar, srv EmbeddingsServer) {
	// If the following call pancis, it indicates UnimplementedEmbeddingsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Embeddings_ServiceDesc, srv)
}

func _Embeddings_GenerateEmbeddings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbeddingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingsServer).GenerateEmbeddings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Embeddings_GenerateEmbeddings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingsServer).GenerateEmbeddings(ctx, req.(*EmbeddingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Embeddings_FindSimilarEmbeddings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSimilarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingsServer).FindSimilarEmbeddings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Embeddings_FindSimilarEmbeddings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingsServer).FindSimilarEmbeddings(ctx, req.(*FindSimilarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Embeddings_ServiceDesc is the grpc.ServiceDesc for Embeddings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Embeddings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "embeddings.Embeddings",
	HandlerType: (*EmbeddingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateEmbeddings",
			Handler:    _Embeddings_GenerateEmbeddings_Handler,
		},
		{
			MethodName: "FindSimilarEmbeddings",
			Handler:    _Embeddings_FindSimilarEmbeddings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "embeddings.proto",
}
