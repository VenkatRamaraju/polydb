// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: tokenizer.proto

package tokenizerpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EncodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodeRequest) Reset() {
	*x = EncodeRequest{}
	mi := &file_tokenizer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeRequest) ProtoMessage() {}

func (x *EncodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tokenizer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeRequest.ProtoReflect.Descriptor instead.
func (*EncodeRequest) Descriptor() ([]byte, []int) {
	return file_tokenizer_proto_rawDescGZIP(), []int{0}
}

func (x *EncodeRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type EncodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tokens        []int64                `protobuf:"varint,1,rep,packed,name=tokens,proto3" json:"tokens,omitempty"`
	TokenTexts    []string               `protobuf:"bytes,2,rep,name=token_texts,json=tokenTexts,proto3" json:"token_texts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodeResponse) Reset() {
	*x = EncodeResponse{}
	mi := &file_tokenizer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeResponse) ProtoMessage() {}

func (x *EncodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tokenizer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeResponse.ProtoReflect.Descriptor instead.
func (*EncodeResponse) Descriptor() ([]byte, []int) {
	return file_tokenizer_proto_rawDescGZIP(), []int{1}
}

func (x *EncodeResponse) GetTokens() []int64 {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *EncodeResponse) GetTokenTexts() []string {
	if x != nil {
		return x.TokenTexts
	}
	return nil
}

var File_tokenizer_proto protoreflect.FileDescriptor

const file_tokenizer_proto_rawDesc = "" +
	"\n" +
	"\x0ftokenizer.proto\x12\ttokenizer\"#\n" +
	"\rEncodeRequest\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\"I\n" +
	"\x0eEncodeResponse\x12\x16\n" +
	"\x06tokens\x18\x01 \x03(\x03R\x06tokens\x12\x1f\n" +
	"\vtoken_texts\x18\x02 \x03(\tR\n" +
	"tokenTexts2J\n" +
	"\tTokenizer\x12=\n" +
	"\x06Encode\x12\x18.tokenizer.EncodeRequest\x1a\x19.tokenizer.EncodeResponseB\x0fZ\r./tokenizerpbb\x06proto3"

var (
	file_tokenizer_proto_rawDescOnce sync.Once
	file_tokenizer_proto_rawDescData []byte
)

func file_tokenizer_proto_rawDescGZIP() []byte {
	file_tokenizer_proto_rawDescOnce.Do(func() {
		file_tokenizer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tokenizer_proto_rawDesc), len(file_tokenizer_proto_rawDesc)))
	})
	return file_tokenizer_proto_rawDescData
}

var file_tokenizer_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_tokenizer_proto_goTypes = []any{
	(*EncodeRequest)(nil),  // 0: tokenizer.EncodeRequest
	(*EncodeResponse)(nil), // 1: tokenizer.EncodeResponse
}
var file_tokenizer_proto_depIdxs = []int32{
	0, // 0: tokenizer.Tokenizer.Encode:input_type -> tokenizer.EncodeRequest
	1, // 1: tokenizer.Tokenizer.Encode:output_type -> tokenizer.EncodeResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tokenizer_proto_init() }
func file_tokenizer_proto_init() {
	if File_tokenizer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tokenizer_proto_rawDesc), len(file_tokenizer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tokenizer_proto_goTypes,
		DependencyIndexes: file_tokenizer_proto_depIdxs,
		MessageInfos:      file_tokenizer_proto_msgTypes,
	}.Build()
	File_tokenizer_proto = out.File
	file_tokenizer_proto_goTypes = nil
	file_tokenizer_proto_depIdxs = nil
}
